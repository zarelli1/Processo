#!/usr/bin/env python3
"""
Analisador de Conte√∫do Inteligente
Analisa v√≠deos para gerar t√≠tulos, descri√ß√µes e hashtags √∫nicos
"""

import os
import re
import json
import random
from typing import Dict, List, Tuple, Optional
from datetime import datetime
import logging

logger = logging.getLogger(__name__)

class ContentAnalyzer:
    """Analisa conte√∫do de v√≠deos para gerar metadados √∫nicos"""
    
    def __init__(self):
        self.keywords_database = self._load_keywords_database()
        self.title_templates = self._load_title_templates()
        self.description_templates = self._load_description_templates()
        self.hashtag_categories = self._load_hashtag_categories()
        
    def _load_keywords_database(self) -> Dict:
        """Base de dados de palavras-chave por categoria"""
        return {
            "programacao": [
                "python", "javascript", "java", "react", "node", "css", "html", 
                "api", "backend", "frontend", "database", "sql", "nosql", "git",
                "docker", "kubernetes", "aws", "cloud", "devops", "algoritmo",
                "codigo", "desenvolvimento", "software", "aplicativo", "sistema"
            ],
            "tutorial": [
                "tutorial", "como fazer", "passo a passo", "aprenda", "curso",
                "aula", "explicacao", "demonstracao", "exemplo", "pratica",
                "basico", "avancado", "iniciante", "completo", "rapido"
            ],
            "tecnologia": [
                "tecnologia", "tech", "inovacao", "digital", "futuro", "ai",
                "inteligencia artificial", "machine learning", "data science",
                "blockchain", "iot", "5g", "mobile", "web", "cybersecurity"
            ],
            "neg√≥cios": [
                "business", "empresa", "startup", "empreendedorismo", "marketing",
                "vendas", "gestao", "lideranca", "produtividade", "estrategia",
                "financas", "investimento", "economia", "mercado", "cliente"
            ],
            "design": [
                "design", "ui", "ux", "interface", "experiencia", "usuario",
                "prototipo", "figma", "adobe", "criativo", "visual", "grafico",
                "branding", "identidade", "layout", "tipografia", "cores"
            ]
        }
    
    def _load_title_templates(self) -> List[Dict]:
        """Templates de t√≠tulos melhorados e mais coerentes"""
        return [
            {
                "pattern": "{action} {topic} em {time} | {emotion}",
                "actions": ["Aprenda", "Domine", "Descubra", "Entenda", "Veja como", "Comece", "Pratique"],
                "emotions": ["üî• VIRAL", "üí° GENIUS", "‚ö° R√ÅPIDO", "üéØ CERTEIRO", "‚ú® INCR√çVEL", "üöÄ √âPICO", "üíé PREMIUM"],
                "times": ["60 segundos", "2 minutos", "5 minutos", "menos de 3min", "poucos minutos", "rapidamente", "agora mesmo"]
            },
            {
                "pattern": "{question} {topic}? | {benefit}",
                "questions": ["Como dominar", "Por que usar", "Quando aplicar", "Onde encontrar", "Como come√ßar com"],
                "benefits": ["A resposta vai te chocar", "Mudar√° sua perspectiva", "Ningu√©m te conta isso", "Segredo dos experts", "M√©todo comprovado", "Estrat√©gia profissional"]
            },
            {
                "pattern": "{number} {thing} de {topic} que {result}",
                "numbers": ["3", "5", "7", "10"],
                "things": ["estrat√©gias", "t√©cnicas avan√ßadas", "truques profissionais", "m√©todos secretos", "dicas fundamentais", "conceitos essenciais"],
                "results": ["todo profissional deveria saber", "v√£o acelerar seu aprendizado", "transformar√£o seus resultados", "s√£o game changers", "far√£o a diferen√ßa"]
            },
            {
                "pattern": "{topic}: {insight} | {call_to_action}",
                "insights": ["O que ningu√©m te ensina", "A verdade por tr√°s", "Metodologia completa", "Guia definitivo", "Estrat√©gia avan√ßada", "T√©cnica profissional"],
                "call_to_actions": ["SALVE AGORA!", "COMPARTILHE!", "APLIQUE HOJE!", "TESTE VOC√ä MESMO!", "IMPLEMENTE J√Å!"]
            },
            {
                "pattern": "{intensity} {topic} | {promise}",
                "intensity": ["Masterclass de", "Curso intensivo de", "Workshop pr√°tico de", "Guia completo de", "Fundamentos de"],
                "promise": ["Resultados garantidos", "M√©todo testado", "Passo a passo", "Do zero ao pro", "F√°cil e r√°pido", "Sem enrola√ß√£o"]
            },
            {
                "pattern": "{topic} {level} | {hook}",
                "level": ["para iniciantes", "n√≠vel avan√ßado", "profissional", "do b√°sico ao avan√ßado", "intermedi√°rio"],
                "hook": ["Voc√™ vai se surpreender", "Mais simples do que parece", "A forma correta", "Como os experts fazem", "M√©todo revolucion√°rio"]
            }
        ]
    
    def _load_description_templates(self) -> List[str]:
        """Templates de descri√ß√µes variadas com link obrigat√≥rio"""
        return [
            """üéØ {hook}

{main_content}

üí° O que voc√™ achou? Comenta a√≠ sua opini√£o!

üöÄ AUTOMATIZE SEU NEG√ìCIO:
üëâ https://automatize.lovable.app

üîó SIGA PARA MAIS CONTE√öDO:
‚úÖ Dicas exclusivas
‚úÖ Tutoriais pr√°ticos  
‚úÖ Automa√ß√£o e tecnologia

{hashtags}

#Shorts {category_tags}""",

            """‚ö° {hook}

{main_content}

ü§î J√° conhecia essa estrat√©gia? Deixa nos coment√°rios!

üéØ ACELERE SEUS RESULTADOS:
üîó https://automatize.lovable.app

üìö QUER APRENDER MAIS?
üëâ Segue aqui para conte√∫do di√°rio
üëâ Salva o post para n√£o perder
üëâ Compartilha com quem precisa

{hashtags}

#Shorts {category_tags}""",

            """üî• {hook}

{main_content}

üí≠ Qual sua experi√™ncia com isso? Conta pra gente!

üíº TRANSFORME SEU NEG√ìCIO:
‚ú® https://automatize.lovable.app

üéØ SE CURTIU:
‚≠ê Deixa o like
üí¨ Comenta sua d√∫vida
üì§ Compartilha com os amigos

{hashtags}

#Shorts {category_tags}""",

            """‚ú® {hook}

{main_content}

üöÄ Gostou? Tem muito mais vindo por a√≠!

üé™ SOLU√á√ïES COMPLETAS:
üåü https://automatize.lovable.app

üì± SEGUE PRA N√ÉO PERDER:
üîî Conte√∫do exclusivo
üí° Dicas valiosas
üéì Automa√ß√£o e crescimento

{hashtags}

#Shorts {category_tags}""",

            """üöÄ {hook}

{main_content}

üî• Aplique isso no seu projeto!

‚ö° POTENCIALIZE SEUS RESULTADOS:
üéØ https://automatize.lovable.app

üé¨ CONTE√öDO DE QUALIDADE:
üìà Estrat√©gias testadas
üõ†Ô∏è Ferramentas pr√°ticas
üíé Insights valiosos

{hashtags}

#Shorts {category_tags}""",

            """üíé {hook}

{main_content}

üéØ Implementou? Conta o resultado!

üöÄ ACELERE SEU CRESCIMENTO:
üíº https://automatize.lovable.app

üîî NOTIFICA√á√ïES ATIVADAS?
‚úÖ Novos v√≠deos toda semana
‚úÖ Dicas exclusivas
‚úÖ Conte√∫do premium

{hashtags}

#Shorts {category_tags}"""
        ]
    
    def _load_hashtag_categories(self) -> Dict:
        """Categorias de hashtags por tipo de conte√∫do"""
        return {
            "programacao": [
                "#Python", "#JavaScript", "#Programacao", "#Codigo", "#Developer",
                "#Programming", "#WebDev", "#TechTips", "#SoftwareDev", "#API"
            ],
            "tutorial": [
                "#Tutorial", "#AprendaComigo", "#ComoFazer", "#PassoAPasso", "#Dicas",
                "#Aprenda", "#Curso", "#Aula", "#Educacao", "#Conhecimento"
            ],
            "tecnologia": [
                "#Tech", "#Tecnologia", "#Inovacao", "#Digital", "#Futuro",
                "#AI", "#MachineLearning", "#TechNews", "#Innovation", "#Technology"
            ],
            "neg√≥cios": [
                "#Business", "#Empreendedorismo", "#Marketing", "#Vendas", "#Gestao",
                "#Lideranca", "#Produtividade", "#Startup", "#Empresa", "#Sucesso"
            ],
            "design": [
                "#Design", "#UI", "#UX", "#Interface", "#Creative", "#Visual",
                "#Designer", "#Prototipo", "#Criatividade", "#Arte"
            ],
            "geral": [
                "#Viral", "#Trending", "#MustWatch", "#Incrivel", "#Impressionante",
                "#Curiosidade", "#Interessante", "#Surpreendente", "#Legal", "#Top"
            ]
        }
    
    def analyze_video_content(self, video_title: str, video_description: str = "", 
                            video_tags: List[str] = None) -> Dict:
        """
        Analisa conte√∫do do v√≠deo para determinar categoria e temas
        
        Args:
            video_title: T√≠tulo do v√≠deo original
            video_description: Descri√ß√£o do v√≠deo original
            video_tags: Tags do v√≠deo original
            
        Returns:
            Dict com an√°lise do conte√∫do
        """
        logger.info(f"Analisando conte√∫do: {video_title}")
        
        content_text = f"{video_title} {video_description or ''}".lower()
        video_tags = video_tags or []
        
        # Detectar categorias
        category_scores = {}
        for category, keywords in self.keywords_database.items():
            score = 0
            for keyword in keywords:
                if keyword.lower() in content_text:
                    score += content_text.count(keyword.lower())
            category_scores[category] = score
        
        # Categoria principal
        main_category = max(category_scores, key=category_scores.get)
        confidence = category_scores[main_category] / max(sum(category_scores.values()), 1)
        
        # Extrair t√≥picos principais
        topics = self._extract_topics(content_text, main_category)
        
        # Detectar tipo de conte√∫do
        content_type = self._detect_content_type(content_text)
        
        return {
            "main_category": main_category,
            "confidence": confidence,
            "category_scores": category_scores,
            "topics": topics,
            "content_type": content_type,
            "original_title": video_title,
            "original_tags": video_tags
        }
    
    def _extract_topics(self, content_text: str, category: str) -> List[str]:
        """Extrai t√≥picos principais do conte√∫do"""
        topics = []
        
        # Buscar palavras-chave da categoria
        if category in self.keywords_database:
            for keyword in self.keywords_database[category]:
                if keyword.lower() in content_text:
                    topics.append(keyword)
        
        # Extrair palavras importantes (> 3 caracteres, n√£o stopwords)
        stopwords = {
            "para", "como", "que", "uma", "com", "por", "sobre", "este", "esta",
            "seu", "sua", "mais", "muito", "quando", "onde", "porque", "assim",
            "the", "and", "or", "in", "on", "at", "to", "for", "of", "with"
        }
        
        words = re.findall(r'\b\w{4,}\b', content_text)
        for word in words:
            if word not in stopwords and len(topics) < 10:
                topics.append(word)
        
        return list(set(topics))[:5]  # Top 5 t√≥picos √∫nicos
    
    def _detect_content_type(self, content_text: str) -> str:
        """Detecta o tipo de conte√∫do"""
        
        if any(word in content_text for word in ["tutorial", "como", "passo", "aprenda"]):
            return "tutorial"
        elif any(word in content_text for word in ["review", "an√°lise", "opini√£o", "teste"]):
            return "review"
        elif any(word in content_text for word in ["dica", "truque", "segredo", "hack"]):
            return "dica"
        elif any(word in content_text for word in ["noticia", "news", "atualiza√ß√£o", "lan√ßamento"]):
            return "news"
        else:
            return "geral"
    
    def generate_unique_title(self, content_analysis: Dict, part_number: int = 1) -> str:
        """Gera t√≠tulo √∫nico e coerente baseado na an√°lise de conte√∫do"""
        
        # Garantir que cada parte tenha um template diferente
        template_index = (part_number - 1) % len(self.title_templates)
        template_data = self.title_templates[template_index]
        pattern = template_data["pattern"]
        
        # Melhorar t√≥pico baseado na categoria
        main_topic = content_analysis["topics"][0] if content_analysis["topics"] else "tecnologia"
        
        # Refinar t√≥pico baseado na categoria
        topic_refinements = {
            "programacao": ["Python", "JavaScript", "desenvolvimento", "c√≥digo", "programa√ß√£o"],
            "tutorial": ["este m√©todo", "esta t√©cnica", "este conceito", "esta estrat√©gia"],
            "tecnologia": ["tecnologia", "inova√ß√£o", "ferramentas", "solu√ß√µes"],
            "neg√≥cios": ["neg√≥cios", "estrat√©gias", "produtividade", "resultados"],
            "design": ["design", "criatividade", "interfaces", "experi√™ncia"]
        }
        
        category = content_analysis["main_category"]
        if category in topic_refinements:
            refined_topics = topic_refinements[category]
            # Usar parte do n√∫mero para garantir consist√™ncia
            topic_index = (part_number - 1) % len(refined_topics)
            main_topic = refined_topics[topic_index]
        
        # Preparar vari√°veis com mais contexto
        variables = {
            "topic": main_topic,
            "part": f"Parte {part_number}",
            "number": random.choice(template_data.get("numbers", ["5"])),
        }
        
        # Adicionar vari√°veis espec√≠ficas do template de forma determin√≠stica
        for key, values in template_data.items():
            if key != "pattern" and isinstance(values, list):
                # Usar part_number para garantir variedade mas consist√™ncia
                value_index = (part_number - 1 + hash(key)) % len(values)
                variables[key] = values[value_index]
        
        try:
            title = pattern.format(**variables)
        except KeyError as e:
            # Fallback melhorado
            fallback_actions = ["Aprenda", "Descubra", "Domine", "Entenda", "Veja"]
            action = fallback_actions[(part_number - 1) % len(fallback_actions)]
            title = f"{action} {main_topic} | Parte {part_number} üî•"
        
        # Adicionar emoji baseado na categoria de forma consistente
        category_emojis = {
            "programacao": "üíª",
            "tutorial": "üìö", 
            "tecnologia": "üöÄ",
            "neg√≥cios": "üíº",
            "design": "üé®"
        }
        
        emoji = category_emojis.get(content_analysis["main_category"], "‚ö°")
        
        # Garantir que emoji n√£o se repita
        if emoji not in title:
            title = f"{title} {emoji}"
        
        # Adicionar varia√ß√£o num√©rica se necess√°rio
        if part_number > 1 and "Parte" not in title:
            title = f"{title} #{part_number}"
        
        return title[:100]  # Limite do YouTube
    
    def generate_unique_description(self, content_analysis: Dict, 
                                  original_video_url: str = "") -> str:
        """Gera descri√ß√£o √∫nica baseada na an√°lise"""
        
        # Selecionar template aleat√≥rio
        template = random.choice(self.description_templates)
        
        # Obter t√≥pico principal
        main_topic = content_analysis['topics'][0] if content_analysis['topics'] else content_analysis['main_category']
        
        # Gerar ganchos mais espec√≠ficos e coerentes
        hooks = [
            f"Voc√™ sabia que {main_topic} pode transformar completamente seus resultados?",
            f"A estrat√©gia de {main_topic} que est√° mudando o jogo para milhares de pessoas!",
            f"Finalmente! O m√©todo de {main_topic} que os experts n√£o querem que voc√™ saiba!",
            f"Aten√ß√£o! Esta t√©cnica de {main_topic} vai revolucionar seu conhecimento!",
            f"Descobri o segredo por tr√°s de {main_topic} e voc√™ precisa ver isso!",
            f"Por que {main_topic} √© fundamental para seu sucesso profissional?"
        ]
        
        # Gerar conte√∫do principal mais elaborado
        main_contents = [
            f"Neste v√≠deo, compartilho insights pr√°ticos sobre {content_analysis['main_category']} que podem acelerar seus resultados imediatamente.",
            f"Uma abordagem estrat√©gica e testada para dominar {content_analysis['main_category']} de forma eficiente e profissional.",
            f"As t√©cnicas mais avan√ßadas de {content_analysis['main_category']} explicadas de maneira simples e aplic√°vel no seu dia a dia.",
            f"Metodologia comprovada em {content_analysis['main_category']} que j√° ajudou milhares de pessoas a alcan√ßarem seus objetivos.",
            f"Conte√∫do exclusivo e aprofundado sobre {content_analysis['main_category']} baseado em experi√™ncias reais e casos de sucesso.",
            f"Estrat√©gias profissionais de {content_analysis['main_category']} que voc√™ pode implementar hoje mesmo para ver resultados."
        ]
        
        # Gerar hashtags espec√≠ficas
        hashtags = self._generate_content_hashtags(content_analysis)
        category_tags = " ".join(self.hashtag_categories.get(content_analysis["main_category"], [])[:5])
        
        # Preencher template
        description = template.format(
            hook=random.choice(hooks),
            main_content=random.choice(main_contents),
            hashtags=" ".join(hashtags[:10]),
            category_tags=category_tags
        )
        
        # Adicionar link do v√≠deo original se fornecido
        if original_video_url:
            description += f"\n\nüé¨ V√≠deo completo: {original_video_url}"
        
        return description[:5000]  # Limite do YouTube
    
    def _generate_content_hashtags(self, content_analysis: Dict) -> List[str]:
        """Gera hashtags espec√≠ficas baseadas no conte√∫do"""
        hashtags = []
        
        # Hashtags da categoria principal
        main_category_tags = self.hashtag_categories.get(content_analysis["main_category"], [])
        hashtags.extend(random.sample(main_category_tags, min(3, len(main_category_tags))))
        
        # Hashtags baseadas nos t√≥picos
        for topic in content_analysis["topics"][:3]:
            hashtags.append(f"#{topic.title()}")
        
        # Hashtags gerais
        general_tags = self.hashtag_categories["geral"]
        hashtags.extend(random.sample(general_tags, 2))
        
        # Hashtags baseadas no tipo de conte√∫do
        content_type_tags = {
            "tutorial": ["#Tutorial", "#Aprenda", "#ComoFazer"],
            "review": ["#Review", "#Analise", "#Teste"],
            "dica": ["#Dica", "#Truque", "#Hack"],
            "news": ["#News", "#Novidade", "#Atualiza√ß√£o"]
        }
        
        if content_analysis["content_type"] in content_type_tags:
            hashtags.extend(content_type_tags[content_analysis["content_type"]][:2])
        
        # Remover duplicatas e limitar
        unique_hashtags = list(dict.fromkeys(hashtags))
        return unique_hashtags[:15]
    
    def generate_video_metadata(self, video_title: str, video_description: str = "",
                              part_number: int = 1, original_url: str = "") -> Dict:
        """
        Gera metadados completos para um v√≠deo
        
        Returns:
            Dict com title, description, tags
        """
        logger.info(f"Gerando metadados para parte {part_number}")
        
        # Analisar conte√∫do
        content_analysis = self.analyze_video_content(video_title, video_description)
        
        # Gerar t√≠tulo √∫nico
        unique_title = self.generate_unique_title(content_analysis, part_number)
        
        # Gerar descri√ß√£o √∫nica
        unique_description = self.generate_unique_description(content_analysis, original_url)
        
        # Gerar tags
        tags = self._generate_content_hashtags(content_analysis)
        
        return {
            "title": unique_title,
            "description": unique_description,
            "tags": [tag.replace("#", "") for tag in tags],  # Remove # para tags
            "category": content_analysis["main_category"],
            "content_type": content_analysis["content_type"]
        }