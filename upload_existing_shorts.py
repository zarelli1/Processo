#!/usr/bin/env python3
"""
Upload autom√°tico dos shorts existentes
"""

import os
import time
from youtube_uploader import YouTubeUploader
from video_processor import VideoProcessor

def parse_selection(selection, max_num):
    """
    Parseia sele√ß√£o de v√≠deos (ex: 1,3,5 ou 1-4 ou 2,5-7)
    
    Args:
        selection: String com sele√ß√£o (ex: "1,3,5" ou "1-4")
        max_num: N√∫mero m√°ximo permitido
        
    Returns:
        Lista de √≠ndices selecionados
    """
    indices = set()
    
    # Dividir por v√≠rgulas
    parts = [part.strip() for part in selection.split(',')]
    
    for part in parts:
        if '-' in part:
            # Range (ex: 1-4)
            try:
                start, end = map(int, part.split('-'))
                if 1 <= start <= max_num and 1 <= end <= max_num and start <= end:
                    indices.update(range(start, end + 1))
                else:
                    raise ValueError(f"Range inv√°lido: {part}")
            except ValueError:
                raise ValueError(f"Range mal formatado: {part}")
        else:
            # N√∫mero individual
            try:
                num = int(part)
                if 1 <= num <= max_num:
                    indices.add(num)
                else:
                    raise ValueError(f"N√∫mero fora do range: {num}")
            except ValueError:
                raise ValueError(f"N√∫mero inv√°lido: {part}")
    
    return sorted(list(indices))

def upload_all_shorts():
    """Upload de shorts com op√ß√£o de escolher quantidade"""
    
    print("üöÄ UPLOAD AUTOM√ÅTICO DOS SHORTS")
    print("=" * 50)
    
    # Verificar pasta de shorts
    shorts_dir = 'shorts'
    if not os.path.exists(shorts_dir):
        print("‚ùå Pasta 'shorts' n√£o encontrada")
        return False
    
    # Listar arquivos
    shorts_files = [f for f in os.listdir(shorts_dir) if f.endswith('.mp4')]
    shorts_files.sort()  # Ordenar alfabeticamente
    
    if not shorts_files:
        print("‚ùå Nenhum short encontrado")
        return False
    
    print(f"üìÅ Encontrados {len(shorts_files)} shorts dispon√≠veis:")
    for i, file in enumerate(shorts_files, 1):
        size = os.path.getsize(os.path.join(shorts_dir, file)) / (1024*1024)
        print(f"   {i}. {file} ({size:.1f} MB)")
    
    # Perguntar quantos v√≠deos fazer upload
    print(f"\nüìä OP√á√ïES DE UPLOAD:")
    print(f"   1. Todos os {len(shorts_files)} shorts")
    print(f"   2. Escolher quantidade espec√≠fica")
    print(f"   3. Selecionar shorts individualmente")
    
    choice = input(f"\nüî¢ Escolha uma op√ß√£o (1-3): ").strip()
    
    videos_to_upload = []
    
    if choice == "1":
        # Todos os v√≠deos
        videos_to_upload = shorts_files
        print(f"‚úÖ Selecionados TODOS os {len(videos_to_upload)} shorts para upload")
        
    elif choice == "2":
        # Quantidade espec√≠fica
        try:
            max_videos = len(shorts_files)
            num_videos = int(input(f"üìù Quantos shorts fazer upload? (1-{max_videos}): "))
            
            if 1 <= num_videos <= max_videos:
                videos_to_upload = shorts_files[:num_videos]
                print(f"‚úÖ Selecionados os primeiros {num_videos} shorts para upload")
            else:
                print(f"‚ùå N√∫mero inv√°lido. Deve ser entre 1 e {max_videos}")
                return False
                
        except ValueError:
            print("‚ùå Entrada inv√°lida. Digite um n√∫mero.")
            return False
            
    elif choice == "3":
        # Sele√ß√£o individual
        print(f"\nüìã Digite os n√∫meros dos shorts que deseja fazer upload:")
        print(f"   Exemplo: 1,3,5 ou 1-4 ou 2,5-7")
        selection = input("üî¢ Sua sele√ß√£o: ").strip()
        
        try:
            selected_indices = parse_selection(selection, len(shorts_files))
            videos_to_upload = [shorts_files[i-1] for i in selected_indices]
            print(f"‚úÖ Selecionados {len(videos_to_upload)} shorts para upload:")
            for video in videos_to_upload:
                print(f"   ‚Ä¢ {video}")
        except Exception as e:
            print(f"‚ùå Sele√ß√£o inv√°lida: {e}")
            return False
    else:
        print("‚ùå Op√ß√£o inv√°lida")
        return False
    
    if not videos_to_upload:
        print("‚ùå Nenhum v√≠deo selecionado")
        return False
    
    # Confirma√ß√£o final
    print(f"\nüéØ RESUMO DO UPLOAD:")
    print(f"   üìä Total de shorts: {len(videos_to_upload)}")
    print(f"   ‚è±Ô∏è  Tempo estimado: {len(videos_to_upload) * 0.5:.1f} minutos")
    
    confirm = input(f"\n‚úÖ Confirma o upload de {len(videos_to_upload)} shorts? [s/N]: ").lower()
    if confirm not in ['s', 'sim', 'y', 'yes']:
        print("‚ùå Upload cancelado pelo usu√°rio")
        return False
    
    # Inicializar uploader
    print("\nüîß Inicializando YouTube Uploader...")
    uploader = YouTubeUploader()
    
    if not uploader.authenticate():
        print("‚ùå Falha na autentica√ß√£o")
        return False
    
    print("‚úÖ Autentica√ß√£o OK!")
    
    # Upload de cada arquivo selecionado
    uploaded_count = 0
    failed_count = 0
    
    for i, filename in enumerate(videos_to_upload, 1):
        file_path = os.path.join(shorts_dir, filename)
        
        print(f"\n‚¨ÜÔ∏è  [{i}/{len(videos_to_upload)}] Uploading: {filename}")
        print("-" * 40)
        
        # Validar formato do v√≠deo
        print("üîç Validando formato do v√≠deo...")
        processor = VideoProcessor()
        video_info = processor.load_video(file_path)
        
        if not video_info:
            print("‚ùå Erro ao carregar v√≠deo - pulando...")
            failed_count += 1
            processor.cleanup()
            continue
        
        # Verificar se est√° no formato correto para Shorts
        shorts_format = video_info['validation']['shorts_format']
        
        if not shorts_format['is_shorts_format'] and shorts_format['needs_conversion']:
            print(f"‚ö†Ô∏è  Formato n√£o √© ideal para Shorts: {video_info['width']}x{video_info['height']}")
            print(f"üìê Aspecto atual: {shorts_format['current_aspect_ratio']:.3f} (ideal: {shorts_format['target_aspect_ratio']:.3f})")
            
            # Oferecer convers√£o
            response = input("üîÑ Converter para formato Shorts (1080x1920, 9:16)? [s/N]: ").lower()
            if response in ['s', 'sim', 'y', 'yes']:
                print("üîÑ Convertendo v√≠deo...")
                converted_path = processor.convert_to_shorts_format()
                
                if converted_path:
                    file_path = converted_path
                    print(f"‚úÖ V√≠deo convertido: {converted_path}")
                else:
                    print("‚ùå Falha na convers√£o - usando v√≠deo original")
            else:
                print("‚ö†Ô∏è  Usando v√≠deo no formato original")
        else:
            if shorts_format['is_shorts_format']:
                print("‚úÖ Formato perfeito para YouTube Shorts!")
            else:
                print("‚ÑπÔ∏è  Formato ser√° aceito pelo YouTube")
        
        # Limpar recursos do processor
        processor.cleanup()
        
        # Gerar metadados inteligentes
        title = generate_title(filename)
        description = generate_description(filename)
        tags = generate_tags(filename)
        
        metadata = {
            'title': title,
            'description': description,
            'tags': tags,
            'categoryId': '22',  # People & Blogs
            'privacyStatus': 'public'  # P√öBLICO
        }
        
        print(f"üìù T√≠tulo: {title}")
        print(f"üè∑Ô∏è  Tags: {', '.join(tags[:3])}...")
        
        try:
            # Fazer upload com par√¢metros corretos
            result = uploader.upload_video(
                file_path=file_path,
                title=metadata['title'],
                description=metadata['description'],
                tags=metadata['tags'],
                category=metadata['categoryId'],
                privacy=metadata['privacyStatus']
            )
            
            if result and result.get('success'):
                video_id = result.get('video_id')
                uploaded_count += 1
                print(f"‚úÖ Upload conclu√≠do!")
                print(f"üîó YouTube: https://youtu.be/{video_id}")
                
                # Aguardar entre uploads (rate limiting)
                if i < len(videos_to_upload):
                    print("‚è≥ Aguardando 30s antes do pr√≥ximo upload...")
                    time.sleep(30)
            else:
                failed_count += 1
                print("‚ùå Upload falhou")
                
        except Exception as e:
            failed_count += 1
            print(f"‚ùå Erro no upload: {e}")
    
    # Resumo final
    print("\n" + "="*50)
    print("üìä RESUMO DO UPLOAD:")
    print(f"   ‚úÖ Sucessos: {uploaded_count}")
    print(f"   ‚ùå Falhas: {failed_count}")
    print(f"   üìä Total: {len(videos_to_upload)}")
    
    if uploaded_count > 0:
        print(f"\nüéâ {uploaded_count} shorts publicados no canal Leonardo_Zarelli!")
        print("üîó Acesse: https://youtube.com/@leonardo_zarelli")
    
    return uploaded_count > 0

def generate_title(filename):
    """Gerar t√≠tulo inteligente baseado no arquivo"""
    
    # Remover extens√£o e limpar nome
    base_name = filename.replace('.mp4', '')
    
    # Se cont√©m "short_X", extrair n√∫mero
    if 'short_' in base_name:
        parts = base_name.split('_short_')
        if len(parts) == 2:
            video_name = parts[0]
            short_num = parts[1]
            
            # Criar t√≠tulo mais atrativo
            if 'Ecossistema' in video_name:
                titles = [
                    f"üöÄ Como Estruturar Seu Ecossistema de IA - Parte {short_num}",
                    f"üí° Automa√ß√£o com IA: Meu Sistema Completo #{short_num}",
                    f"üéØ Ecossistema dos Sonhos com IA e Automa√ß√£o #{short_num}",
                    f"‚ö° Transformando Neg√≥cios com IA - Epis√≥dio {short_num}",
                    f"üî• Meu Setup de IA que Mudou Tudo - Parte {short_num}"
                ]
                return titles[int(short_num) % len(titles)]
    
    # T√≠tulo padr√£o
    return f"üöÄ {base_name[:45]}... #IA #Automa√ß√£o"

def generate_description(filename):
    """Gerar descri√ß√£o otimizada"""
    
    return """üéØ Transformando neg√≥cios com Intelig√™ncia Artificial e Automa√ß√£o!

üìà Neste v√≠deo compartilho estrat√©gias pr√°ticas de como estruturar um ecossistema completo de IA para maximizar produtividade e resultados.

üí° O que voc√™ vai aprender:
‚Ä¢ Ferramentas de IA essenciais
‚Ä¢ Automa√ß√£o de processos
‚Ä¢ Integra√ß√£o de sistemas
‚Ä¢ Otimiza√ß√£o de workflow

üöÄ Quer dominar IA e Automa√ß√£o? 
üëâ Ative o sininho e acompanhe a s√©rie completa!

---
üì± CONECTE-SE COMIGO:
üîó LinkedIn: Leonardo Zarelli
üìß Contato: lzrgeracaoz2000@gmail.com

#IA #InteligenciaArtificial #Automacao #Tecnologia #Produtividade #Empreendedorismo #DigitalTransformation #AI #MachineLearning #TechTips #Inovacao #Startup #TechBrasil"""

def get_video_info(filename):
    """Extrai informa√ß√µes do v√≠deo original para gerar conte√∫do relevante"""
    base_name = filename.replace('.mp4', '')
    
    # Remover sufixos de formato
    clean_name = base_name
    for suffix in ['_teladividida', '_shorts', '_normal']:
        clean_name = clean_name.replace(suffix, '')
    
    # Remover _short_X
    if '_short_' in clean_name:
        clean_name = clean_name.split('_short_')[0]
    
    # Buscar informa√ß√µes do v√≠deo original no diret√≥rio downloads
    downloads_dir = './downloads'
    if os.path.exists(downloads_dir):
        for file in os.listdir(downloads_dir):
            if clean_name.lower() in file.lower() and file.endswith('.info.json'):
                try:
                    import json
                    with open(os.path.join(downloads_dir, file), 'r', encoding='utf-8') as f:
                        info = json.load(f)
                        return {
                            'title': info.get('title', ''),
                            'description': info.get('description', ''),
                            'tags': info.get('tags', []),
                            'channel': info.get('uploader', ''),
                            'duration': info.get('duration', 0)
                        }
                except:
                    pass
    
    return {'title': clean_name, 'description': '', 'tags': [], 'channel': '', 'duration': 0}

def generate_tags(filename):
    """Gera tags baseadas no conte√∫do do v√≠deo"""
    video_info = get_video_info(filename)
    original_title = video_info['title']
    original_tags = video_info['tags']
    
    # Tags base sempre presentes
    base_tags = ['Leonardo Zarelli', 'TechBrasil', 'Conte√∫do']
    
    # Tags espec√≠ficas baseadas no conte√∫do
    if original_title:
        title_lower = original_title.lower()
        
        if any(word in title_lower for word in ['ia', 'inteligencia artificial', 'ai', 'machine learning']):
            return base_tags + [
                'IA', 'Intelig√™ncia Artificial', 'AI', 'MachineLearning',
                'Tecnologia', 'Inova√ß√£o', 'DigitalTransformation', 'Automa√ß√£o',
                'TechTips', 'Futuro', 'ChatGPT', 'OpenAI'
            ]
        elif any(word in title_lower for word in ['automacao', 'automation', 'workflow']):
            return base_tags + [
                'Automa√ß√£o', 'Automation', 'Produtividade', 'Workflow',
                'Efici√™ncia', 'Processos', 'Otimiza√ß√£o', 'Tecnologia',
                'TechTips', 'Sistemas', 'Integra√ß√£o'
            ]
        elif any(word in title_lower for word in ['programacao', 'coding', 'desenvolvimento', 'python', 'javascript']):
            return base_tags + [
                'Programa√ß√£o', 'Coding', 'Desenvolvimento', 'Python',
                'JavaScript', 'WebDev', 'SoftwareDevelopment', 'Programming',
                'Tech', 'Developer', 'Code', 'Tutorial'
            ]
        elif any(word in title_lower for word in ['negocio', 'business', 'empreendedorismo', 'startup']):
            return base_tags + [
                'Empreendedorismo', 'Business', 'Startup', 'Neg√≥cios',
                'Gest√£o', 'Lideran√ßa', 'Estrat√©gia', 'Crescimento',
                'Sucesso', 'Inova√ß√£o', 'Mercado'
            ]
    
    # Tags do v√≠deo original se dispon√≠veis
    if original_tags:
        relevant_tags = [tag for tag in original_tags[:8] if len(tag) > 2]
        return base_tags + relevant_tags
    
    # Tags gen√©ricas
    return base_tags + [
        'Tecnologia', 'Educa√ß√£o', 'Dicas', 'Conhecimento',
        'Aprendizado', 'Inova√ß√£o', 'TechTips', 'Conte√∫do',
        'Tutorial', 'Desenvolvimento'
    ]

if __name__ == "__main__":
    success = upload_all_shorts()
    
    if success:
        print("\nüéâ UPLOAD AUTOM√ÅTICO CONCLU√çDO!")
        print("üì∫ Seus shorts est√£o sendo processados pelo YouTube")
        print("‚è∞ Em alguns minutos estar√£o dispon√≠veis publicamente")
        
        print("\nüîÑ PARA PROCESSAR NOVOS V√çDEOS:")
        print("python3 production_script.py https://youtu.be/VIDEO_ID 5")
    else:
        print("‚ùå Problemas no upload autom√°tico")